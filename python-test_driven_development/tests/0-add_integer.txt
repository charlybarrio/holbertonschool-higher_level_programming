The ``0-add_integer`` module
======================

Using ``add_integer``
-------------------

This is an example text file in reStructuredText format.  First import
``add_integer`` from the ``0-add_integer`` module:

    >>> add_integer = __import__('0-add_integer').add_integer

    >>> add_integer(2, 3)
    5

    >>> add_integer('a', 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(9223372036854775808, 1)
    9223372036854775809


    >>> add_integer(293478e249837)
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(4, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer("hola")
	Traceback (most recent call last):
	...
        TypeError: a must be an integer

	>>> add_integer("")
	Traceback (most recent call last):
	...
        TypeError: a must be an integer

	None case (nothing is pass as argument):

	Not passing anything:

	>>> add_integer(None)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

	Passing 'a' and 'b' as None:

	>>> add_integer(None, None)
	Traceback (most recent call last):
        ...
        TypeError: a must be an integer

	Passing 'a' as None:

        >>> add_integer(None, 5)
        Traceback (most recent call last):
        ...
        TypeError: a must be an integer

	Passing 'b' as None:

	>>> add_integer(5, None)
	Traceback (most recent call last):
        ...
        TypeError: b must be an integer
